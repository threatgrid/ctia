language: clojure
lein: 2.9.1
dist: trusty

branches:
  only:
  - master
  - release
  - /^rel-[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$/
  - /^v[0-9]+(.[0-9]+)+$/

env:
    global:
      - LOG_DIR=$HOME/log
      - BIN_DIR=$HOME/bin
      - LEIN_ROOT=1
      - CTIA_MAJOR_VERSION=1
      - COMPOSE_URI=https://github.com/docker/compose/releases/download/1.9.0
      - COMPOSE_BIN=$HOME/bin/docker-compose-1-9-0
      - COMPOSE_LOG=$HOME/log/docker-compose.log
      - CTIA_STORE_ES_DEFAULT_HOST=127.0.0.1
      - CTIA_STORE_ES_DEFAULT_INDEXNAME=elasticsearch
      - CTIA_STORE_ES_DEFAULT_CLUSTERNAME=elasticsearch
      - CTIA_HOOK_ES_HOST=127.0.0.1
      - CTIA_HOOK_ES_PORT=9200
      - CTIA_HOOK_ES_INDEXNAME=elasticsearch
      - CTIA_HOOK_REDIS_URI=redis://127.0.0.1:6379
      - SHELLCHECK_VERSION=v0.7.1 # "stable" or "v0.4.7", or "latest"
      # https://stackoverflow.com/a/34809448
      # travis allows 5 concurrent builds for open source plans
      # across org
      - CTIA_NSPLITS=5
      # test future clojure releases
      - CLOJURE_NEXT=1.10.2-alpha4

# Cache our Maven deps to be kind to clojars, github, docker images
cache:
    directories:
    - $HOME/bin
    - $HOME/.m2
    - $HOME/.cache/pip

# default jdk for testing and (always) deployment.
# others tested in cron job.
jdk:
  - openjdk11

# define stage order
stages:
  - test
  - deploy

matrix: #note: don't use "jobs:" introduces an extra build
  include:
    # dummy build to ease transition to GitHub Actions
    - stage: test
      if: type = pull_request
      before_install: skip
      install: skip
      before_script: skip
      script: skip
      after_script: skip

    # Main build
    # ==========
    # Parallelizes the tests using ${CTIA_NSPLITS} TravisCI jobs.
    #
    # To split tests, set CTIA_THIS_SPLIT=n CTIA_NSPLITS=m, where m is the
    # total number of splits, and n is a number in (clojure.core/range m)
    # unique to the container which identifies which chunk
    # of the tests to run.
    #
    #  eg., CTIA_THIS_SPLIT=0 CTIA_NSPLITS=2 lein test       ; run the first half of the tests
    #  eg., CTIA_THIS_SPLIT=1 CTIA_NSPLITS=2 lein test       ; run the second half of the tests
    #
    # Notes:
    # - this is currently not the case, but it would be nice if the jdk
    #   tested here matched with
    #     https://github.com/threatgrid/tenzin/blob/master/nextgen/saltstack/srv/salt/openjdk/defaults.yml
    # - IMPORTANT! Must include split build id's from in (range ${CTIA_NSPLITS}).
    #    Nothing ensures this is actually true, so make sure it is!
    - stage: test
      name: "JDK 11"
      if: type = push
      env: CTIA_THIS_SPLIT=0
    - name: "JDK 11"
      if: type = push
      env: CTIA_THIS_SPLIT=1
    - name: "JDK 11"
      if: type = push
      env: CTIA_THIS_SPLIT=2
    - name: "JDK 11"
      if: type = push
      env: CTIA_THIS_SPLIT=3
    - name: "JDK 11"
      if: type = push
      env: CTIA_THIS_SPLIT=4

    # Cron jobs:
    # ==========
    # Note:
    # - cron jobs are created here: https://travis-ci.com/threatgrid/ctia/settings
    # - they repeat around the same time as initially started
    # - we deploy (also) during cron jobs in the 'deploy' stage
    - name: "JDK 11"
      if: type = cron
    - name: "JDK 11 + Clojure next"
      if: type = cron
      env: CLOJURE_VERSION=$CLOJURE_NEXT
    - name: "JDK 14 + Clojure next"
      if: type = cron
      jdk: openjdk14
      env: CLOJURE_VERSION=$CLOJURE_NEXT

    # Deploy
    # ======
    # fan in and deploy on master branch
    - stage: deploy
      # also deploy after every cron job. helps minimize issues with
      # 'push' deployment races.
      if: type = cron || type = push
      before_script: skip # don't need docker
      script: skip        # tests already pass
      after_script: ./build/build.sh

before_install:
    # upgrade shellcheck (https://github.com/koalaman/shellcheck#installing-a-pre-compiled-binary)
    - wget -qO- "https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION?}/shellcheck-${SHELLCHECK_VERSION?}.linux.x86_64.tar.xz" | tar -xJv
    - cp "shellcheck-${SHELLCHECK_VERSION}/shellcheck" "${BIN_DIR}"
    - shellcheck --version
    # run shellcheck
    - ./scripts/shellcheck-build.sh

    # ES5 needs this
    - sudo sysctl -w vm.max_map_count=262144

    # create log dir if missing
    - mkdir -p $LOG_DIR

    #https://github.com/travis-ci/travis-ci/issues/5227
    - echo "127.0.0.1 "`hostname` | sudo tee /etc/hosts

    # install docker-compose if not in cache
    - if [ ! -f $COMPOSE_BIN ]; then curl -L {$COMPOSE_URI}/docker-compose-`uname -s`-`uname -m` > $COMPOSE_BIN; fi
    - chmod +x $COMPOSE_BIN

# install any dependencies required
install:
    - source $HOME/.rvm/scripts/rvm
    - rvm use 2.2

before_script:
    - $COMPOSE_BIN -f containers/dev/docker-compose.yml up -d> $COMPOSE_LOG
    # Wait ES
    - until curl http://127.0.0.1:9200/; do sleep 1; done
    # Wait Kafka
    - until echo dump | nc 127.0.0.1 2181 | grep brokers; do sleep 1; done

services:
    - docker

script:
  - ./build/run-tests.sh

notifications:
  email: false
