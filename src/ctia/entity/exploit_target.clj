(ns ctia.entity.exploit-target
  (:require [ctia.domain.entities :refer [default-realize-fn]]
            [ctia.store :refer :all]
            [ctia.http.routes
             [common :refer [BaseEntityFilterParams PagingParams SourcableEntityFilterParams]]
             [crud :refer [entity-crud-routes]]]
            [ctia.schemas
             [core :refer [def-acl-schema def-stored-schema]]
             [sorting :as sorting]]
            [ctia.stores.es
             [mapping :as em]
             [store :refer [def-es-store]]]
            [ctim.schemas.exploit-target :as es]
            [flanders.utils :as fu]
            [schema-tools.core :as st]
            [schema.core :as s]))

(def-acl-schema ExploitTarget
  es/ExploitTarget
  "exploit-target")

(def-acl-schema PartialExploitTarget
  (fu/optionalize-all es/ExploitTarget)
  "partial-exploit-target")

(s/defschema PartialExploitTargetList
  [PartialExploitTarget])

(def-acl-schema NewExploitTarget
  es/NewExploitTarget
  "new-exploit-target")

(def-stored-schema StoredExploitTarget
  es/StoredExploitTarget
  "stored-exploit-target")

(def-stored-schema PartialStoredExploitTarget
  (fu/optionalize-all es/StoredExploitTarget)
  "partial-stored-exploit-target")

(def realize-exploit-target
  (default-realize-fn "exploit-target" NewExploitTarget StoredExploitTarget))

(def exploit-target-mapping
  {"exploit-target"
   {:dynamic "strict"
    :include_in_all false
    :properties
    (merge
     em/base-entity-mapping
     em/describable-entity-mapping
     em/sourcable-entity-mapping
     em/stored-entity-mapping
     {:valid_time em/valid-time
      :vulnerability em/vulnerability
      :weakness em/weakness
      :configuration em/configuration})}})

(def-es-store ExploitTargetStore
  :exploit-target
  StoredExploitTarget
  PartialStoredExploitTarget)

(def exploit-target-fields
  (concat sorting/default-entity-sort-fields
          sorting/describable-entity-sort-fields
          sorting/sourcable-entity-sort-fields
          [:valid_time.start_time
           :valid_time.end_time]))

(def exploit-target-sort-fields
  (apply s/enum exploit-target-fields))

(s/defschema ExploitTargetFieldsParam
  {(s/optional-key :fields) [exploit-target-sort-fields]})

(s/defschema ExploitTargetSearchParams
  (st/merge
   PagingParams
   BaseEntityFilterParams
   SourcableEntityFilterParams
   ExploitTargetFieldsParam
   {:query s/Str
    (s/optional-key :sort_by) exploit-target-sort-fields}))

(def ExploitTargetGetParams ExploitTargetFieldsParam)

(s/defschema ExploitTargetByExternalIdQueryParams
  (st/merge
   PagingParams
   ExploitTargetFieldsParam))

(def capabilities
  #{:create-exploit-target
    :read-exploit-target
    :delete-exploit-target
    :search-exploit-target})

(def exploit-target-routes
  (entity-crud-routes
   {:entity :exploit-target
    :new-schema NewExploitTarget
    :entity-schema ExploitTarget
    :get-schema PartialExploitTarget
    :get-params ExploitTargetGetParams
    :list-schema PartialExploitTargetList
    :search-schema PartialExploitTargetList
    :external-id-q-params ExploitTargetByExternalIdQueryParams
    :search-q-params ExploitTargetSearchParams
    :new-spec :new-exploit-target/map
    :realize-fn realize-exploit-target
    :get-capabilities :read-exploit-target
    :post-capabilities :create-exploit-target
    :put-capabilities :create-exploit-target
    :delete-capabilities :delete-exploit-target
    :search-capabilities :search-exploit-target
    :external-id-capabilities #{:read-exploit-target :external-id}}))

(def exploit-target-entity
  {:route-context "/exploit-target"
   :tags ["ExploitTarget"]
   :entity :exploit-target
   :plural :exploit_targets
   :schema ExploitTarget
   :partial-schema PartialExploitTarget
   :partial-list-schema PartialExploitTargetList
   :new-schema NewExploitTarget
   :stored-schema StoredExploitTarget
   :partial-stored-schema PartialStoredExploitTarget
   :realize-fn realize-exploit-target
   :es-store ->ExploitTargetStore
   :es-mapping exploit-target-mapping
   :routes exploit-target-routes
   :capabilities capabilities})
