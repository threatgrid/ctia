(ns ctia.entity.vulnerability
  (:require
   [flanders.utils :as fu]
   [ctia.entity.feedback.graphql-schemas :as feedback]
   [ctia.entity.relationship.graphql-schemas :as relationship]
   [ctia.entity.vulnerability.mapping :refer [vulnerability-mapping]]
   [ctia.domain.entities :refer [default-realize-fn]]
   [ctia.schemas.graphql
    [sorting :as graphql-sorting]
    [flanders :as flanders]
    [helpers :as g]
    [pagination :as pagination]]
   [ctia.http.routes
    [common :refer [BaseEntityFilterParams
                    PagingParams
                    SourcableEntityFilterParams]
     :as routes.common]
    [crud :refer [services->entity-crud-routes]]]
   [ctia.schemas
    [utils :as csu]
    [core :refer [APIHandlerServices def-acl-schema def-stored-schema]]
    [sorting :refer [default-entity-sort-fields]]]
   [ctia.stores.es.store :refer [def-es-store]]
   [ctim.schemas.vulnerability :as ws]
   [schema-tools.core :as st]
   [schema.core :as s]
   [ctia.schemas.sorting :as sorting]
   [ctia.schemas.graphql.ownership :as go]))

(def-acl-schema Vulnerability
  ws/Vulnerability
  "vulnerability")

(def-acl-schema PartialVulnerability
  (fu/optionalize-all ws/Vulnerability)
  "partial-vulnerability")

(s/defschema PartialVulnerabilityList
  [PartialVulnerability])

(def-acl-schema NewVulnerability
  ws/NewVulnerability
  "new-vulnerability")

(def-stored-schema StoredVulnerability Vulnerability)

(s/defschema PartialStoredVulnerability
  (csu/optional-keys-schema StoredVulnerability))

(def realize-vulnerability
  (default-realize-fn "vulnerability" NewVulnerability StoredVulnerability))

(def-es-store VulnerabilityStore :vulnerability StoredVulnerability PartialStoredVulnerability)

(def vulnerability-fields
  (concat sorting/base-entity-sort-fields
          sorting/sourcable-entity-sort-fields
          []))

(def vulnerability-sort-fields
  (apply s/enum vulnerability-fields))

(s/defschema VulnerabilityFieldsParam
  {(s/optional-key :fields) [vulnerability-sort-fields]})

(s/defschema VulnerabilitySearchParams
  (st/merge
   PagingParams
   BaseEntityFilterParams
   SourcableEntityFilterParams
   VulnerabilityFieldsParam
   (st/optional-keys
    {:query s/Str
     :sort_by  vulnerability-sort-fields})))

(def VulnerabilityGetParams VulnerabilityFieldsParam)

(s/defschema VulnerabilityByExternalIdQueryParams
  (st/merge
   PagingParams
   VulnerabilityFieldsParam))

(def VulnerabilityType
  (let [{:keys [fields name description]}
        (flanders/->graphql
         (fu/optionalize-all ws/Vulnerability)
         {})]
    (g/new-object
     name
     description
     []
     (merge fields
            feedback/feedback-connection-field
            relationship/relatable-entity-fields
            go/graphql-ownership-fields))))

(def vulnerability-order-arg
  (graphql-sorting/order-by-arg
   "VulnerabilityOrder"
   "Vulnerabilityes"
   (into {}
         (map (juxt graphql-sorting/sorting-kw->enum-name name)
              vulnerability-fields))))

(def VulnerabilityConnectionType
  (pagination/new-connection VulnerabilityType))

(def vulnerability-histogram-fields
  [:timestamp])

(def vulnerability-enumerable-fields
  [:source])

(s/defn vulnerability-routes [services :- APIHandlerServices]
  (services->entity-crud-routes
   services
   {:entity :vulnerability
    :new-schema NewVulnerability
    :entity-schema Vulnerability
    :get-schema PartialVulnerability
    :get-params VulnerabilityGetParams
    :list-schema PartialVulnerabilityList
    :search-schema PartialVulnerabilityList
    :external-id-q-params VulnerabilityByExternalIdQueryParams
    :search-q-params VulnerabilitySearchParams
    :new-spec :new-vulnerability/map
    :realize-fn realize-vulnerability
    :get-capabilities :read-vulnerability
    :post-capabilities :create-vulnerability
    :put-capabilities :create-vulnerability
    :delete-capabilities :delete-vulnerability
    :search-capabilities :search-vulnerability
    :external-id-capabilities :read-vulnerability
    :can-aggregate? true
    :histogram-fields vulnerability-histogram-fields
    :enumerable-fields vulnerability-enumerable-fields}))

(def capabilities
  #{:create-vulnerability
    :read-vulnerability
    :delete-vulnerability
    :search-vulnerability})

(def vulnerability-entity
  {:route-context "/vulnerability"
   :tags ["Vulnerability"]
   :entity :vulnerability
   :plural :vulnerabilities
   :schema Vulnerability
   :partial-schema PartialVulnerability
   :partial-list-schema PartialVulnerabilityList
   :new-schema NewVulnerability
   :stored-schema StoredVulnerability
   :partial-stored-schema PartialStoredVulnerability
   :realize-fn realize-vulnerability
   :es-store ->VulnerabilityStore
   :es-mapping vulnerability-mapping
   :new-spec :new-vulnerability/map
   :services->routes (routes.common/reloadable-function
                       vulnerability-routes)
   :capabilities capabilities})
