(ns ctia.entity.vulnerability
  (:require
   [clj-momo.lib.es.pagination :as es-pagination]
   [ctia.domain.entities :as ent]
   [ctia.entity.feedback.graphql-schemas :as feedback]
   [ctia.entity.relationship.graphql-schemas :as relationship]
   [ctia.entity.vulnerability.cpe :as cpe]
   [ctia.entity.vulnerability.mapping :refer [vulnerability-mapping]]
   [ctia.http.routes.common :as routes.common]
   [ctia.http.routes.crud :refer [services->entity-crud-routes]]
   [ctia.lib.compojure.api.core :refer [context GET routes]]
   [ctia.schemas.core :refer [APIHandlerServices def-acl-schema def-stored-schema]]
   [ctia.schemas.graphql.flanders :as flanders]
   [ctia.schemas.graphql.helpers :as g]
   [ctia.schemas.graphql.ownership :as go]
   [ctia.schemas.graphql.pagination :as pagination]
   [ctia.schemas.graphql.sorting :as graphql-sorting]
   [ctia.schemas.sorting :as sorting]
   [ctia.store :as ctia-store]
   [ctia.stores.es.store :refer [def-es-store]]
   [ctim.schemas.vulnerability :as ws]
   [flanders.utils :as fu]
   [ring.swagger.schema :as swagger-schema]
   [schema-tools.core :as st]
   [schema.core :as s]))

(def-acl-schema Vulnerability
  ws/Vulnerability
  "vulnerability")

(def-acl-schema PartialVulnerability
  (fu/optionalize-all ws/Vulnerability)
  "partial-vulnerability")

(s/defschema PartialVulnerabilityList
  [PartialVulnerability])

(def-acl-schema NewVulnerability
  ws/NewVulnerability
  "new-vulnerability")

(def-stored-schema StoredVulnerability Vulnerability)

(s/defschema PartialStoredVulnerability
  (st/optional-keys-schema StoredVulnerability))

(def realize-vulnerability
  (ent/default-realize-fn "vulnerability" NewVulnerability StoredVulnerability))

(def-es-store VulnerabilityStore :vulnerability StoredVulnerability PartialStoredVulnerability)

(def vulnerability-fields
  (concat sorting/base-entity-sort-fields
          sorting/sourcable-entity-sort-fields
          sorting/describable-entity-sort-fields
          []))

(def vulnerability-sort-fields
  (apply s/enum vulnerability-fields))

(s/defschema VulnerabilityFieldsParam
  {(s/optional-key :fields) [vulnerability-sort-fields]})

(s/defschema VulnerabilitySearchParams
  (st/merge
   routes.common/PagingParams
   routes.common/BaseEntityFilterParams
   routes.common/SourcableEntityFilterParams
   routes.common/SearchableEntityParams
   VulnerabilityFieldsParam
   (st/optional-keys
    {:sort_by vulnerability-sort-fields})))

(def VulnerabilityGetParams VulnerabilityFieldsParam)

(s/defschema VulnerabilityByExternalIdQueryParams
  (st/merge
   routes.common/PagingParams
   VulnerabilityFieldsParam))

(def VulnerabilityType
  (let [{:keys [fields name description]}
        (flanders/->graphql
         (fu/optionalize-all ws/Vulnerability)
         {})]
    (g/new-object
     name
     description
     []
     (merge fields
            feedback/feedback-connection-field
            relationship/relatable-entity-fields
            go/graphql-ownership-fields))))

(def vulnerability-order-arg
  (graphql-sorting/order-by-arg
   "VulnerabilityOrder"
   "Vulnerabilityes"
   (into {}
         (map (juxt graphql-sorting/sorting-kw->enum-name name)
              vulnerability-fields))))

(def VulnerabilityConnectionType
  (pagination/new-connection VulnerabilityType))

(def vulnerability-histogram-fields
  [:timestamp])

(def vulnerability-enumerable-fields
  [:source])

(defn lucene-search-term
  "Constructs a lucene search term that matches the `part`,
  `vendor`, and `product` fields of a CPE."
  [{:keys [part vendor product]}]
  (for [field ["configurations.nodes.cpe_match.cpe23Uri"
               "configurations.nodes.children.cpe_match.cpe23Uri"]]
    (format "%s:cpe\\:2.3\\:%s\\:%s\\:%s*"
            field
            part
            (cpe/internal->triple-escape vendor)
            (cpe/internal->triple-escape product))))

(defn build-configurations-query
  "Build ES Query String Query for retreiving Vulnerabilities with
  Configurations that have CPE Match Strings which match the part,
  vendor and product of an element in `cpes`."
  [cpes]
  (->> cpes
       (mapcat lucene-search-term)
       (interpose " OR ")
       (apply str)))

(s/defschema CpeMatchStrings
  {:cpe23_match_strings
   (swagger-schema/describe [(s/constrained s/Str
                                            cpe/valid-formatted-cpe-23-string?
                                            "Valid CPE Match with Product and Vendor components")]
                            "CPE 2.3 match strings to search by")})

(defn vulnerability-ids-affected-by-cpe-matches
  "Returns lazy seq of ids of vulnerabilities affected by
  `cpe-matches`."
  [{:keys [cpe-matches identity-map query-params store]}]
  (lazy-seq
   (let [{:keys [data paging]}
         (ctia-store/query-string-search store
                                         {:full-text {:query (build-configurations-query cpe-matches)}}
                                         identity-map
                                         (merge {:fields [:configurations.nodes :id]
                                                 :sort {:id :asc}}
                                                query-params))
         ids (cpe/vulnerabilities->ids cpe-matches data)]
     (if-let [next-params (:next paging)]
       (concat ids (vulnerability-ids-affected-by-cpe-matches {:cpe-matches cpe-matches
                                                               :identity-map identity-map
                                                               :query-params (merge query-params next-params)
                                                               :store store}))
       ids))))

(defn search-by-ids
  "Search `store` for vulnerabilities with id in seq `ids`."
  [{:keys [identity-map ids limit params store]}]
  (ctia-store/query-string-search store
                                  (merge (routes.common/search-query :timestamp params)
                                         {:filter-map {:id (take limit ids)}})
                                  identity-map
                                  (merge params {:sort {:id :asc}})))

(s/defn search-by-cpe-match-strings
  "Provides route which searches for Vulnerabilities by CPE Match
  Strings."
  [{{:keys [get-store]} :StoreService
    :as services} :- APIHandlerServices]
  (context "/cpe_match_strings" []
    (let [capabilities :search-vulnerability]
      (GET "/" []
        :return PartialVulnerabilityList
        :query [{cpe23-match-strings :cpe23_match_strings
                 limit :limit
                 :as params}
                (st/dissoc (st/merge VulnerabilitySearchParams
                                     CpeMatchStrings)
                           :sort_by
                           :sort_order
                           :offset)]
        :summary "List Vulnerabilities with configurations matching CPE 2.3 match strings"
        :description (routes.common/capabilities->description capabilities)
        :capabilities capabilities
        :auth-identity identity
        :identity-map identity-map
        (let [cpe-matches (map cpe/->cpe-match cpe23-match-strings)
              store (get-store :vulnerability)]
          (-> (search-by-ids {:identity-map identity-map
                              :ids (vulnerability-ids-affected-by-cpe-matches {:cpe-matches cpe-matches
                                                                               :identity-map identity-map
                                                                               :query-params params
                                                                               :store store})
                              :limit (or limit es-pagination/default-limit)
                              :params params
                              :store store})
              (ent/page-with-long-id services)
              ent/un-store-page
              routes.common/paginated-ok))))))

(s/defn vulnerability-routes [services :- APIHandlerServices]
  (routes
   (search-by-cpe-match-strings services)
   (services->entity-crud-routes
    services
    {:entity                   :vulnerability
     :new-schema               NewVulnerability
     :entity-schema            Vulnerability
     :get-schema               PartialVulnerability
     :get-params               VulnerabilityGetParams
     :list-schema              PartialVulnerabilityList
     :search-schema            PartialVulnerabilityList
     :external-id-q-params     VulnerabilityByExternalIdQueryParams
     :search-q-params          VulnerabilitySearchParams
     :new-spec                 :new-vulnerability/map
     :realize-fn               realize-vulnerability
     :get-capabilities         :read-vulnerability
     :post-capabilities        :create-vulnerability
     :put-capabilities         :create-vulnerability
     :delete-capabilities      :delete-vulnerability
     :search-capabilities      :search-vulnerability
     :external-id-capabilities :read-vulnerability
     :can-aggregate?           true
     :histogram-fields         vulnerability-histogram-fields
     :enumerable-fields        vulnerability-enumerable-fields})))

(def capabilities
  #{:create-vulnerability
    :read-vulnerability
    :delete-vulnerability
    :search-vulnerability})

(def vulnerability-entity
  {:route-context         "/vulnerability"
   :tags                  ["Vulnerability"]
   :entity                :vulnerability
   :plural                :vulnerabilities
   :schema                Vulnerability
   :partial-schema        PartialVulnerability
   :partial-list-schema   PartialVulnerabilityList
   :new-schema            NewVulnerability
   :stored-schema         StoredVulnerability
   :partial-stored-schema PartialStoredVulnerability
   :realize-fn            realize-vulnerability
   :es-store              ->VulnerabilityStore
   :es-mapping            vulnerability-mapping
   :new-spec              :new-vulnerability/map
   :services->routes      (routes.common/reloadable-function vulnerability-routes)
   :capabilities          capabilities
   :fields                vulnerability-fields
   :sort-fields           vulnerability-fields
   :searchable-fields     (routes.common/searchable-fields
                           vulnerability-entity)})
