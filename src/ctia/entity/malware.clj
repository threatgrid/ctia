(ns ctia.entity.malware
  (:require [ctia.domain.entities :refer [default-realize-fn]]
            [ctia.entity.feedback.graphql-schemas :as feedback]
            [ctia.entity.relationship.graphql-schemas :as relationship]
            [ctia.http.routes
             [common :refer [BaseEntityFilterParams PagingParams SourcableEntityFilterParams]]
             [crud :refer [entity-crud-routes]]]
            [ctia.schemas
             [core :refer [def-acl-schema def-stored-schema]]
             [sorting :as sorting]]
            [ctia.schemas.graphql
             [sorting :as graphql-sorting]
             [flanders :as flanders]
             [helpers :as g]
             [pagination :as pagination]]
            [ctia.store :refer :all]
            [ctia.stores.es
             [mapping :as em]
             [store :refer [def-es-store]]]
            [ctim.schemas.malware :as malware]
            [flanders.utils :as fu]
            [schema-tools.core :as st]
            [schema.core :as s]))

(def-acl-schema Malware
  malware/Malware
  "malware")

(def-acl-schema PartialMalware
  (fu/optionalize-all malware/Malware)
  "partial-malware")

(s/defschema PartialMalwareList
  [PartialMalware])

(def-acl-schema NewMalware
  malware/NewMalware
  "new-malware")

(def-stored-schema StoredMalware
  malware/StoredMalware
  "stored-malware")

(def-stored-schema PartialStoredMalware
  (fu/optionalize-all malware/StoredMalware)
  "partial-stored-malware")

(def realize-malware
  (default-realize-fn "malware" NewMalware StoredMalware))

(def malware-mapping
  {"malware"
   {:dynamic "strict"
    :include_in_all false
    :properties
    (merge
     em/base-entity-mapping
     em/sourcable-entity-mapping
     em/stored-entity-mapping
     {:name em/all_token
      :description em/all_text
      :labels em/token
      :kill_chain_phases em/kill-chain-phase
      :x_mitre_aliases em/token})}})

(def-es-store MalwareStore :malware StoredMalware PartialStoredMalware)

(def malware-fields
  (concat sorting/base-entity-sort-fields
          sorting/sourcable-entity-sort-fields
          [:name]))

(def malware-sort-fields
  (apply s/enum malware-fields))

(s/defschema MalwareFieldsParam
  {(s/optional-key :fields) [malware-sort-fields]})

(s/defschema MalwareSearchParams
  (st/merge
   PagingParams
   BaseEntityFilterParams
   SourcableEntityFilterParams
   MalwareFieldsParam
   {:query s/Str}
   (st/optional-keys
    {:labels s/Str
     :kill_chain_phases.kill_chain_name s/Str
     :kill_chain_phases.phase_name s/Str
     :sort_by malware-sort-fields})))

(s/defschema MalwareGetParams MalwareFieldsParam)

(s/defschema MalwareByExternalIdQueryParams
  (st/merge PagingParams
            MalwareFieldsParam))

(def capabilities
  #{:create-malware
    :read-malware
    :delete-malware
    :search-malware})

(def MalwareType
  (let [{:keys [fields name description]}
        (flanders/->graphql
         (fu/optionalize-all malware/Malware)
         {})]
    (g/new-object
     name
     description
     []
     (merge fields
            feedback/feedback-connection-field
            relationship/relatable-entity-fields))))

(def malware-order-arg
  (graphql-sorting/order-by-arg
   "MalwareOrder"
   "malwares"
   (into {}
         (map (juxt graphql-sorting/sorting-kw->enum-name name)
              malware-fields))))

(def MalwareConnectionType
  (pagination/new-connection MalwareType))


(def malware-routes
  (entity-crud-routes
   {:entity :malware
    :new-schema NewMalware
    :entity-schema Malware
    :get-schema PartialMalware
    :get-params MalwareGetParams
    :list-schema PartialMalwareList
    :search-schema PartialMalwareList
    :external-id-q-params MalwareByExternalIdQueryParams
    :search-q-params MalwareSearchParams
    :new-spec :new-malware/map
    :realize-fn realize-malware
    :get-capabilities :read-malware
    :post-capabilities :create-malware
    :put-capabilities :create-malware
    :delete-capabilities :delete-malware
    :search-capabilities :search-malware
    :external-id-capabilities #{:read-malware :external-id}}))

(def malware-entity
  {:route-context "/malware"
   :tags ["Malware"]
   :entity :malware
   :plural :malwares
   :schema Malware
   :partial-schema PartialMalware
   :partial-list-schema PartialMalwareList
   :new-schema NewMalware
   :stored-schema StoredMalware
   :partial-stored-schema PartialStoredMalware
   :realize-fn realize-malware
   :es-store ->MalwareStore
   :es-mapping malware-mapping
   :routes malware-routes
   :capabilities capabilities})
