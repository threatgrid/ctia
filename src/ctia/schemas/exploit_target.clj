(ns ctia.schemas.exploit-target
  (:require [ctia.schemas.common :as c]
            [ctia.schemas.relationships :as rel]
            [ctia.schemas.vocabularies :as v]
            [schema.core :as s]
            [ring.swagger.schema :refer [describe]]
            [schema-tools.core :as st]))

(s/defschema Vulnerability
  "See http://stixproject.github.io/data-model/1.2/et/VulnerabilityType/"
  {

   :title (describe s/Str "title for this vulnerability")
   :description (describe s/Str "title for this vulnerability")
   (s/optional-key :is_known)
   (describe s/Bool "whether or not the vulnerability is known (i.e. not a 0-day) at the time of characterization.")
   (s/optional-key :is_public_acknowledged)
   (describe s/Bool "whether or not the vulnerability is publicly acknowledged by the vendor")
   (s/optional-key :short_description)
   (describe s/Str "short text description of this vulnerability")
   (s/optional-key :cve_id)
   (describe s/Str "CVE identifier")
   (s/optional-key :osvdb_id)
   (describe s/Int "OSVDB identifier")
   (s/optional-key :source)
   (describe s/Str "the source of the CVE or OSVDB as a textual description or URL") ; source of CVE or OSVDB ref
   (s/optional-key :discovered_datetime)
   (describe c/Time "date and time that this vulnerability was first discovered") ; Simplified
   (s/optional-key :published_datetime)
   (describe c/Time "date and time that this vulnerability was first published") ; Simplified
   ;; TODO - :affected_software below is greatly simplified, should it be expanded?
   (s/optional-key :affected_software)
   (describe [s/Str] "list of platforms and software that are affected by this vulnerability")
   (s/optional-key :references)
   (describe [c/URI] "list of external references describing this vulnerability")
   ;; Not provided: CVSS_Score ; Should it be?
   })

(s/defschema Weakness
  "See http://stixproject.github.io/data-model/1.2/et/WeaknessType/"
  {:description (describe s/Str "text description of this Weakness")
   (s/optional-key :cwe_id)
   (describe s/Str "CWE identifier") ;; CWE identifier for a particular weakness
   })

(s/defschema Configuration
  "See http://stixproject.github.io/data-model/1.2/et/ConfigurationType/"
  {:description (describe s/Str "text description of this Configuration")
   (s/optional-key :short_description)
   (describe s/Str "short text description of this Configuration")
   (s/optional-key :cce_id)
   (describe s/Str "CCE identifier") ;; The CCE identifier for a configuration item
   })

(s/defschema ExploitTarget
  "See http://stixproject.github.io/data-model/1.2/et/ExploitTargetType/"
  (st/merge
   c/GenericStixIdentifiers
   {:valid_time c/ValidTime
    (s/optional-key :version)
    (describe s/Str "schema version for this content")
    (s/optional-key :vulnerability)
    (describe [Vulnerability] "identifies and characterizes a Vulnerability as a potential Exploit Target")
    (s/optional-key :weakness)
    (describe [Weakness] "identifies and characterizes a Weakness as a potential Exploit Target")
    (s/optional-key :configuration)
    (describe [Configuration] "identifies and characterizes a Configuration as a potential Exploit Target")
    (s/optional-key :potential_COAs)
    (describe rel/RelatedCOAs "identifies and characterizes a Configuration as a potential Exploit Target")
    (s/optional-key :source)
    (describe s/Str "ExploitTarget source")
    (s/optional-key :related_exploit_targets)
    (describe rel/RelatedExploitTargets "identifies and characterizes a Configuration as a potential Exploit Target")

    ;; Not provided: related_packages (deprecated)
    ;; Not provided: handling
    }))

(s/defschema NewExploitTarget
  "Schema for submitting ExploitTargets"
  (st/merge
   (st/dissoc ExploitTarget
              :id
              :valid_time)
   {(s/optional-key :valid_time) c/ValidTime}))

(s/defschema StoredExploitTarget
  "An ExploitTarget as stored in the data store"
  (st/merge ExploitTarget
            {:owner s/Str
             :created c/Time
             :modified c/Time}))

(s/defn realize-exploit-target :- StoredExploitTarget
  ([new-exploit-target :- NewExploitTarget
    id :- s/Str
    login :- s/Str]
   (realize-exploit-target new-exploit-target id login nil))
  ([new-exploit-target :- NewExploitTarget
    id :- s/Str
    login :- s/Str
    prev-exploit-target :- (s/maybe StoredExploitTarget)]
   (let [now (c/timestamp)]
     (assoc new-exploit-target
            :id id
            :created (or (:created prev-exploit-target)
                         now)
            :modified now
            :owner login
            :valid_time (or (:valid_time prev-exploit-target)
                            {:end_time (or (get-in new-exploit-target [:valid_time :end_time])
                                           c/default-expire-date)
                             :start_time (or (get-in new-exploit-target [:valid_time :start_time])
                                             now)})))))
